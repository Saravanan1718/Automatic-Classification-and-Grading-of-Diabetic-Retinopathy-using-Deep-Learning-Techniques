{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":14774,"databundleVersionId":875431,"sourceType":"competition"},{"sourceId":4806877,"sourceType":"datasetVersion","datasetId":2783384},{"sourceId":4989908,"sourceType":"datasetVersion","datasetId":2894137},{"sourceId":5051915,"sourceType":"datasetVersion","datasetId":2933179},{"sourceId":5296809,"sourceType":"datasetVersion","datasetId":3079780},{"sourceId":5296963,"sourceType":"datasetVersion","datasetId":3079865}],"dockerImageVersionId":30381,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"target_size = (224,224)\nbatch_size = 32\ntrain_val_split = 0.2\nnum_classes = 5\nnb_epochs =100\n#init_epoch = 29\nwandb_resume_state = True\nexp_name = 'test11'","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:48.902189Z","iopub.execute_input":"2023-04-30T14:41:48.903119Z","iopub.status.idle":"2023-04-30T14:41:48.909177Z","shell.execute_reply.started":"2023-04-30T14:41:48.903079Z","shell.execute_reply":"2023-04-30T14:41:48.908395Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"import shutil\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Dense, GlobalAveragePooling2D, Dropout\nfrom tensorflow.keras.optimizers import Adam\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nimport seaborn as sns\nfrom keras.models import save_model\nimport cv2\nfrom tensorflow.keras.metrics import AUC, Precision, Recall\nimport wandb\nfrom wandb.keras import WandbCallback","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:48.924668Z","iopub.execute_input":"2023-04-30T14:41:48.925235Z","iopub.status.idle":"2023-04-30T14:41:48.933874Z","shell.execute_reply.started":"2023-04-30T14:41:48.925198Z","shell.execute_reply":"2023-04-30T14:41:48.932977Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"wandb.login(key='017a7b4516d494ef8f402dfcbc3204b00f6cedbc')","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:48.945237Z","iopub.execute_input":"2023-04-30T14:41:48.946566Z","iopub.status.idle":"2023-04-30T14:41:48.961282Z","shell.execute_reply.started":"2023-04-30T14:41:48.946531Z","shell.execute_reply":"2023-04-30T14:41:48.960142Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Calling wandb.login() after wandb.init() has no effect.\n","output_type":"stream"},{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"True"},"metadata":{}}]},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/aptos2019-blindness-detection/train.csv')\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:48.964995Z","iopub.execute_input":"2023-04-30T14:41:48.965794Z","iopub.status.idle":"2023-04-30T14:41:48.997191Z","shell.execute_reply.started":"2023-04-30T14:41:48.965756Z","shell.execute_reply":"2023-04-30T14:41:48.996033Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"        id_code  diagnosis\n0  000c1434d8d7          2\n1  001639a390f0          4\n2  0024cdab0c1e          1\n3  002c21358ce6          0\n4  005b95c28852          0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_code</th>\n      <th>diagnosis</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>000c1434d8d7</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>001639a390f0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0024cdab0c1e</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>002c21358ce6</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>005b95c28852</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"if wandb_resume_state:\n    #wandb.init(project=\"Fashion-Classification\", resume=True, group=exp_name)\n    wandb.init(project=\"DR_Classification\", entity=\"super-saiyan\",resume = True,group = exp_name)\nelse:    \n    exp_name = wandb.util.generate_id()\n    myrun = wandb.init(\n            project='DR_Classification',\n            group=exp_name,\n            config={\n                'Image Size':224,\n                'Num Channels':3,\n                'Epoch': nb_epochs,\n                'Batch_size':batch_size,\n                'Loss':\"categorical_crossentropy\",            \n                'Optimizer':'Adam',\n            }\n    )\nconfig = wandb.config\nprint(exp_name)","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:49.001975Z","iopub.execute_input":"2023-04-30T14:41:49.004577Z","iopub.status.idle":"2023-04-30T14:41:56.540210Z","shell.execute_reply.started":"2023-04-30T14:41:49.004539Z","shell.execute_reply":"2023-04-30T14:41:56.538459Z"},"trusted":true},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Finishing last run (ID:27qu8g5d) before initializing another..."},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Waiting for W&B process to finish... <strong style=\"color:green\">(success).</strong>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"VBox(children=(Label(value='108.679 MB of 108.679 MB uploaded (0.000 MB deduped)\\r'), FloatProgress(value=1.0,…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":""}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<style>\n    table.wandb td:nth-child(1) { padding: 0 10px; text-align: left ; width: auto;} td:nth-child(2) {text-align: left ; width: 100%}\n    .wandb-row { display: flex; flex-direction: row; flex-wrap: wrap; justify-content: flex-start; width: 100% }\n    .wandb-col { display: flex; flex-direction: column; flex-basis: 100%; flex: 1; padding: 10px; }\n    </style>\n<div class=\"wandb-row\"><div class=\"wandb-col\"><h3>Run history:</h3><br/><table class=\"wandb\"><tr><td>accuracy</td><td>▁▄▄▄▅▅▆▇█▂▄▄▅▆▇█</td></tr><tr><td>auc</td><td>▁▅▅▅▆▆▇▇█▂▅▅▆▇▇█</td></tr><tr><td>epoch</td><td>▁▂▃▄▅▅▆▇█▁▂▃▄▅▅▆</td></tr><tr><td>loss</td><td>█▅▅▄▄▃▃▂▁█▅▅▄▃▂▁</td></tr><tr><td>precision</td><td>▁▃▄▄▅▅▆▇█▂▃▄▅▆▇█</td></tr><tr><td>recall</td><td>▁▄▅▅▅▆▆▇█▂▄▅▆▆▇█</td></tr><tr><td>val_accuracy</td><td>▁█▅▇██▅▅▃▁▁▄▄▄▃▂</td></tr><tr><td>val_auc</td><td>▃▆▆▇▇█▆▅▂▃▄▅▅▄▁▁</td></tr><tr><td>val_loss</td><td>▃▂▂▁▃▁▃▄█▃▃▂▂▃▇▆</td></tr><tr><td>val_precision</td><td>▆▆▃█▄█▃▃▂▇▆▃▆▄▁▁</td></tr><tr><td>val_recall</td><td>▂▄▇▅█▆▇▇▇▁▂▅▅▅▆▆</td></tr></table><br/></div><div class=\"wandb-col\"><h3>Run summary:</h3><br/><table class=\"wandb\"><tr><td>GFLOPS</td><td>0.99752</td></tr><tr><td>accuracy</td><td>0.86421</td></tr><tr><td>auc</td><td>0.98233</td></tr><tr><td>best_epoch</td><td>5</td></tr><tr><td>best_val_loss</td><td>0.69318</td></tr><tr><td>epoch</td><td>6</td></tr><tr><td>loss</td><td>0.36953</td></tr><tr><td>precision</td><td>0.90403</td></tr><tr><td>recall</td><td>0.81952</td></tr><tr><td>val_accuracy</td><td>0.69904</td></tr><tr><td>val_auc</td><td>0.90988</td></tr><tr><td>val_loss</td><td>1.02028</td></tr><tr><td>val_precision</td><td>0.74769</td></tr><tr><td>val_recall</td><td>0.66484</td></tr></table><br/></div></div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Synced <strong style=\"color:#cdcd00\">firm-sun-44</strong>: <a href=\"https://wandb.ai/super-saiyan/DR_Classification/runs/27qu8g5d\" target=\"_blank\">https://wandb.ai/super-saiyan/DR_Classification/runs/27qu8g5d</a><br/>Synced 6 W&B file(s), 513 media file(s), 0 artifact file(s) and 1 other file(s)"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Find logs at: <code>./wandb/run-20230430_134257-27qu8g5d/logs</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Successfully finished last run (ID:27qu8g5d). Initializing new run:<br/>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"wandb version 0.15.0 is available!  To upgrade, please run:\n $ pip install wandb --upgrade"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Tracking run with wandb version 0.12.21"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Run data is saved locally in <code>/kaggle/working/wandb/run-20230430_144149-27qu8g5d</code>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"Resuming run <strong><a href=\"https://wandb.ai/super-saiyan/DR_Classification/runs/27qu8g5d\" target=\"_blank\">firm-sun-44</a></strong> to <a href=\"https://wandb.ai/super-saiyan/DR_Classification\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"},"metadata":{}},{"name":"stdout","text":"test11\n","output_type":"stream"}]},{"cell_type":"code","source":"train_val_split = 0.2","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:56.542213Z","iopub.execute_input":"2023-04-30T14:41:56.542600Z","iopub.status.idle":"2023-04-30T14:41:56.552593Z","shell.execute_reply.started":"2023-04-30T14:41:56.542559Z","shell.execute_reply":"2023-04-30T14:41:56.551572Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"#train_data_gen = ImageDataGenerator(rescale=1./255, validation_split=train_val_split)\ntrain_data_gen = ImageDataGenerator(rescale = 1./255,\n                                    validation_split=train_val_split)\ntrain_generator = train_data_gen.flow_from_directory( directory='/kaggle/input/customdataset/Feature_Extraction', target_size = (224,224), batch_size = 32, class_mode = 'categorical', subset='training') \nvalidation_generator = train_data_gen.flow_from_directory( directory='/kaggle/input/customdataset/Feature_Extraction', target_size = (224,224), batch_size = 32,  class_mode = 'categorical', subset='validation')","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:56.554137Z","iopub.execute_input":"2023-04-30T14:41:56.554656Z","iopub.status.idle":"2023-04-30T14:41:57.267707Z","shell.execute_reply.started":"2023-04-30T14:41:56.554599Z","shell.execute_reply":"2023-04-30T14:41:57.266688Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"Found 2931 images belonging to 5 classes.\nFound 731 images belonging to 5 classes.\n","output_type":"stream"}]},{"cell_type":"code","source":"labels = list(train_generator.class_indices.keys())","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.269467Z","iopub.execute_input":"2023-04-30T14:41:57.269865Z","iopub.status.idle":"2023-04-30T14:41:57.274918Z","shell.execute_reply.started":"2023-04-30T14:41:57.269830Z","shell.execute_reply":"2023-04-30T14:41:57.273876Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Activation\nif wandb.run.resumed: #if run is to be resumed\n    model = keras.models.load_model(wandb.restore(\"model-best.h5\").name)\nelse:#else new run\n    model = Sequential()\n    # Add the first convolutional layer\n    model.add(Conv2D(32, kernel_size=(3, 3),strides=(1, 1),padding='same',input_shape=(224,224,3)))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Add the second convolutional layer\n    model.add(Conv2D(64, kernel_size=(3, 3), strides=(1, 1), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Add the third convolutional layer\n    model.add(Conv2D(128, kernel_size=(3, 3), strides=(1, 1), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Add the forth convolutional layer\n    model.add(Conv2D(256, kernel_size=(3, 3), strides=(1, 1), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Add the fifth convolutional layer\n    model.add(Conv2D(512, kernel_size=(3, 3), strides=(1, 1), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n\n    # Flatten the output from the convolutional layers\n    model.add(Flatten())\n\n    # Add a fully connected layer\n    model.add(Dense(1024))\n    model.add(Activation('relu'))\n    model.add(Dropout(0.5))\n\n    # Add a final fully connected layer\n    model.add(Dense(512))\n    model.add(Activation('relu'))\n    model.add(Dropout(0.5))\n\n    # Add the output layer with 5 class labels\n    model.add(Dense(5))\n    model.add(Activation('softmax'))\n\n    # Compile the model\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy', Precision(),  Recall(), AUC()])\n","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.276672Z","iopub.execute_input":"2023-04-30T14:41:57.277410Z","iopub.status.idle":"2023-04-30T14:41:57.624954Z","shell.execute_reply.started":"2023-04-30T14:41:57.277374Z","shell.execute_reply":"2023-04-30T14:41:57.623535Z"},"trusted":true},"execution_count":28,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_23/2050102218.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mConv2D\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMaxPooling2D\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mFlatten\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mDropout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mActivation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mwandb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresumed\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;31m#if run is to be resumed\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mwandb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrestore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"model-best.h5\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#else new run\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSequential\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'keras' is not defined"],"ename":"NameError","evalue":"name 'keras' is not defined","output_type":"error"}]},{"cell_type":"code","source":"#wandb keras compatibility\nwandb_call = WandbCallback(save_model=True,\n                          save_graph=True,\n                          save_weights_only=True,\n                          log_weights=True,\n                          log_gradients=True,\n                          training_data=train_generator,\n                          validation_data=validation_generator,\n                          validation_steps = validation_generator.samples // batch_size,\n                          labels=labels,\n                          predictions = 180,\n                          input_type='images')","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.626351Z","iopub.status.idle":"2023-04-30T14:41:57.627090Z","shell.execute_reply.started":"2023-04-30T14:41:57.626821Z","shell.execute_reply":"2023-04-30T14:41:57.626848Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.callbacks import EarlyStopping\nearly_stopping = EarlyStopping( patience=3, verbose=1)","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.628475Z","iopub.status.idle":"2023-04-30T14:41:57.629199Z","shell.execute_reply.started":"2023-04-30T14:41:57.628943Z","shell.execute_reply":"2023-04-30T14:41:57.628967Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(train_generator,steps_per_epoch = len(train_generator),\n                          validation_data = validation_generator,\n                          validation_steps =len( validation_generator),epochs = nb_epochs ,callbacks=[early_stopping,wandb_call])","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.630532Z","iopub.status.idle":"2023-04-30T14:41:57.631276Z","shell.execute_reply.started":"2023-04-30T14:41:57.630982Z","shell.execute_reply":"2023-04-30T14:41:57.631007Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.preprocessing import label_binarize\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, mean_squared_error,mean_absolute_error\nimport numpy as np\n# Make predictions for the test set\ny_pred = model.predict(validation_generator)\ny_pred = np.argmax(y_pred,axis=1)\ny_true = validation_generator.classes\n\n# Binarize the true labels and predictions\ny_true_bin = label_binarize(y_true, classes=np.unique(y_true))\ny_pred_bin = label_binarize(y_pred, classes=np.unique(y_true))\n\n# Compute the AUC for each class\naucs = []\nfor i in range(y_true_bin.shape[1]):\n    fpr, tpr, thresholds = roc_curve(y_true_bin[:, i], y_pred_bin[:, i])\n    auc = roc_auc_score(y_true_bin[:, i], y_pred_bin[:, i])\n    aucs.append(auc)\n    plt.plot(fpr, tpr, label='Class {} ROC curve (AUC = {:.2f})'.format(i, auc))\n\nplt.plot([0, 1], [0, 1], 'k--')  # Random classifier line\nplt.xlim([0.0, 0.8])\nplt.ylim([0.0, 0.5])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curves for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.632588Z","iopub.status.idle":"2023-04-30T14:41:57.633303Z","shell.execute_reply.started":"2023-04-30T14:41:57.633041Z","shell.execute_reply":"2023-04-30T14:41:57.633066Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_true = np.argmax(y_true_bin, axis=1)\ny_pred = np.argmax(y_pred_bin, axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.634594Z","iopub.status.idle":"2023-04-30T14:41:57.635305Z","shell.execute_reply.started":"2023-04-30T14:41:57.635050Z","shell.execute_reply":"2023-04-30T14:41:57.635074Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport itertools\n\n# Generate predictions for the test set\n#y_pred = model.predict(validation_generator)\n#y_pred = np.argmax(y_pred,axis=1)\n#y_true = validation_generator.classes\n\n# Calculate the confusion matrix\ncm = confusion_matrix(y_true, y_pred)\n\n# Define the class labels\nclass_names = validation_generator.class_indices.keys()\n\n# Plot the confusion matrix\nplt.figure(figsize=(8, 8))\nplt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)\nplt.title(\"Confusion Matrix\")\nplt.colorbar()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names, rotation=90)\nplt.yticks(tick_marks, class_names)\n\nfmt = 'd'\nthresh = cm.max() / 2.\nfor i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n    plt.text(j, i, format(cm[i, j], fmt),\n             horizontalalignment=\"center\",\n             color=\"white\" if cm[i, j] > thresh else \"black\")\n\nplt.ylabel('True label')\nplt.xlabel('Predicted label')\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.636733Z","iopub.status.idle":"2023-04-30T14:41:57.637564Z","shell.execute_reply.started":"2023-04-30T14:41:57.637264Z","shell.execute_reply":"2023-04-30T14:41:57.637292Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#save model\nmodel_json = model.to_json()\nwith open('model_variant18.json', 'w') as json_file:\n    json_file.write(model_json)\n\nmodel_saved = save_model(model, './weights.hdf5')\n#load model\nwith open('model_variant18.json', 'r') as json_file:\n    json_saved_model = json_file.read()\n\nmodel_loaded = tf.keras.models.model_from_json(json_saved_model)\nmodel_loaded.load_weights('weights.hdf5')\nmodel_loaded.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n#test single image\npath = '/kaggle/input/traindata/train/3/0104b032c141.png'\nimage = cv2.imread(path)\nimage = cv2.resize(image, (224,224))\nimage = image/ 255    #normalise\n#print(image.shape)\nimage = image.reshape(-1, 224,224,3)      #reshape in format to send more than one image to predict\n#print(image.shape)\n\nresult = model_loaded(image)\n#print(result)  #probabilities that the image belong to each class\nresult = np.argmax(result, axis=1)\n\nif(result==0):\n    print('Grade 0')\nelif(result == 1):\n    print('Grade 1')\nelif(result == 2):\n    print('Grade 2')\nelif(result == 3):\n    print('Grade 3')\nelse:\n    print('Grade 4')","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.638975Z","iopub.status.idle":"2023-04-30T14:41:57.639706Z","shell.execute_reply.started":"2023-04-30T14:41:57.639443Z","shell.execute_reply":"2023-04-30T14:41:57.639468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#train_data_gen = ImageDataGenerator(rescale=1./255, validation_split=train_val_split)\ntrain_data_gen = ImageDataGenerator(rescale = 1./255,\n                                    validation_split=train_val_split)\nr_train_generator = train_data_gen.flow_from_directory( directory='/kaggle/input/redlesion-customdataset/RedLesion_CustomDataset', target_size = (224,224), batch_size = 32, class_mode = 'categorical', subset='training') \nr_validation_generator = train_data_gen.flow_from_directory( directory='/kaggle/input/redlesion-customdataset/RedLesion_CustomDataset', target_size = (224,224), batch_size = 32,  class_mode = 'categorical', subset='validation')","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.640975Z","iopub.status.idle":"2023-04-30T14:41:57.641693Z","shell.execute_reply.started":"2023-04-30T14:41:57.641421Z","shell.execute_reply":"2023-04-30T14:41:57.641444Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = model.fit(r_train_generator,steps_per_epoch = len(r_train_generator),\n                          validation_data = r_validation_generator,\n                          validation_steps =len( r_validation_generator),epochs = nb_epochs ,callbacks=[early_stopping,wandb_call])","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.643077Z","iopub.status.idle":"2023-04-30T14:41:57.643793Z","shell.execute_reply.started":"2023-04-30T14:41:57.643523Z","shell.execute_reply":"2023-04-30T14:41:57.643547Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import roc_auc_score, roc_curve\nfrom sklearn.preprocessing import label_binarize\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score, mean_squared_error,mean_absolute_error\nimport numpy as np\n# Make predictions for the test set\ny_pred = model.predict(r_validation_generator)\ny_pred = np.argmax(y_pred,axis=1)\ny_true = r_validation_generator.classes\n\n# Binarize the true labels and predictions\ny_true_bin = label_binarize(y_true, classes=np.unique(y_true))\ny_pred_bin = label_binarize(y_pred, classes=np.unique(y_true))\n\n# Compute the AUC for each class\naucs = []\nfor i in range(y_true_bin.shape[1]):\n    fpr, tpr, thresholds = roc_curve(y_true_bin[:, i], y_pred_bin[:, i])\n    auc = roc_auc_score(y_true_bin[:, i], y_pred_bin[:, i])\n    aucs.append(auc)\n    plt.plot(fpr, tpr, label='Class {} ROC curve (AUC = {:.2f})'.format(i, auc))\n\nplt.plot([0, 1], [0, 1], 'k--')  # Random classifier line\nplt.xlim([0.0, 0.8])\nplt.ylim([0.0, 0.5])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curves for Multiclass Classification')\nplt.legend(loc=\"lower right\")\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2023-04-30T14:41:57.645077Z","iopub.status.idle":"2023-04-30T14:41:57.645827Z","shell.execute_reply.started":"2023-04-30T14:41:57.645528Z","shell.execute_reply":"2023-04-30T14:41:57.645553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}